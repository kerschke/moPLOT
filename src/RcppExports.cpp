// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// assureBoundsCPP
NumericVector assureBoundsCPP(NumericVector ind, NumericVector g, NumericVector lower, NumericVector upper);
RcppExport SEXP _moPLOT_assureBoundsCPP(SEXP indSEXP, SEXP gSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ind(indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(assureBoundsCPP(ind, g, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// compute3DcrossProductCPP
NumericVector compute3DcrossProductCPP(NumericVector y, NumericVector z);
RcppExport SEXP _moPLOT_compute3DcrossProductCPP(SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(compute3DcrossProductCPP(y, z));
    return rcpp_result_gen;
END_RCPP
}
// computeVectorLengthCPP
double computeVectorLengthCPP(NumericVector vec);
RcppExport SEXP _moPLOT_computeVectorLengthCPP(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(computeVectorLengthCPP(vec));
    return rcpp_result_gen;
END_RCPP
}
// normalizeVectorCPP
NumericVector normalizeVectorCPP(NumericVector vec, double prec);
RcppExport SEXP _moPLOT_normalizeVectorCPP(SEXP vecSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(normalizeVectorCPP(vec, prec));
    return rcpp_result_gen;
END_RCPP
}
// normalizeMatrixRowsCPP
NumericMatrix normalizeMatrixRowsCPP(NumericMatrix mat, double prec);
RcppExport SEXP _moPLOT_normalizeMatrixRowsCPP(SEXP matSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(normalizeMatrixRowsCPP(mat, prec));
    return rcpp_result_gen;
END_RCPP
}
// computeAngleCPP
double computeAngleCPP(NumericVector vec1, NumericVector vec2, double prec);
RcppExport SEXP _moPLOT_computeAngleCPP(SEXP vec1SEXP, SEXP vec2SEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(computeAngleCPP(vec1, vec2, prec));
    return rcpp_result_gen;
END_RCPP
}
// findNextCellCPP
IntegerVector findNextCellCPP(NumericVector gradient);
RcppExport SEXP _moPLOT_findNextCellCPP(SEXP gradientSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type gradient(gradientSEXP);
    rcpp_result_gen = Rcpp::wrap(findNextCellCPP(gradient));
    return rcpp_result_gen;
END_RCPP
}
// convertIndices2CellIDCPP
int convertIndices2CellIDCPP(IntegerVector indices, IntegerVector dims);
RcppExport SEXP _moPLOT_convertIndices2CellIDCPP(SEXP indicesSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(convertIndices2CellIDCPP(indices, dims));
    return rcpp_result_gen;
END_RCPP
}
// convertCellID2IndicesCPP
IntegerVector convertCellID2IndicesCPP(int cellID, IntegerVector dims);
RcppExport SEXP _moPLOT_convertCellID2IndicesCPP(SEXP cellIDSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cellID(cellIDSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(convertCellID2IndicesCPP(cellID, dims));
    return rcpp_result_gen;
END_RCPP
}
// rotate90Right2D
NumericVector rotate90Right2D(NumericVector v);
RcppExport SEXP _moPLOT_rotate90Right2D(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(rotate90Right2D(v));
    return rcpp_result_gen;
END_RCPP
}
// rotate90Left2D
NumericVector rotate90Left2D(NumericVector v);
RcppExport SEXP _moPLOT_rotate90Left2D(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(rotate90Left2D(v));
    return rcpp_result_gen;
END_RCPP
}
// getMODescentRange2D
List getMODescentRange2D(NumericVector a, NumericVector b);
RcppExport SEXP _moPLOT_getMODescentRange2D(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(getMODescentRange2D(a, b));
    return rcpp_result_gen;
END_RCPP
}
// getNeighbourhood
IntegerMatrix getNeighbourhood(int d, bool include_diagonals);
RcppExport SEXP _moPLOT_getNeighbourhood(SEXP dSEXP, SEXP include_diagonalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< bool >::type include_diagonals(include_diagonalsSEXP);
    rcpp_result_gen = Rcpp::wrap(getNeighbourhood(d, include_diagonals));
    return rcpp_result_gen;
END_RCPP
}
// dominates
bool dominates(NumericVector a, NumericVector b);
RcppExport SEXP _moPLOT_dominates(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(dominates(a, b));
    return rcpp_result_gen;
END_RCPP
}
// imputeBoundary
NumericMatrix imputeBoundary(NumericMatrix moGradMat, List gradMatList, IntegerVector dims);
RcppExport SEXP _moPLOT_imputeBoundary(SEXP moGradMatSEXP, SEXP gradMatListSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type moGradMat(moGradMatSEXP);
    Rcpp::traits::input_parameter< List >::type gradMatList(gradMatListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(imputeBoundary(moGradMat, gradMatList, dims));
    return rcpp_result_gen;
END_RCPP
}
// getCriticalPointsCellCPP
List getCriticalPointsCellCPP(NumericMatrix moGradMat, List gradMatList, NumericVector div, IntegerVector lowerOrderCritical, IntegerVector dims, bool sinks_only);
RcppExport SEXP _moPLOT_getCriticalPointsCellCPP(SEXP moGradMatSEXP, SEXP gradMatListSEXP, SEXP divSEXP, SEXP lowerOrderCriticalSEXP, SEXP dimsSEXP, SEXP sinks_onlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type moGradMat(moGradMatSEXP);
    Rcpp::traits::input_parameter< List >::type gradMatList(gradMatListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type div(divSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lowerOrderCritical(lowerOrderCriticalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< bool >::type sinks_only(sinks_onlySEXP);
    rcpp_result_gen = Rcpp::wrap(getCriticalPointsCellCPP(moGradMat, gradMatList, div, lowerOrderCritical, dims, sinks_only));
    return rcpp_result_gen;
END_RCPP
}
// connectedComponentsGrid
IntegerVector connectedComponentsGrid(IntegerVector ids, IntegerVector dims);
RcppExport SEXP _moPLOT_connectedComponentsGrid(SEXP idsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(connectedComponentsGrid(ids, dims));
    return rcpp_result_gen;
END_RCPP
}
// integrateVectorField
List integrateVectorField(NumericMatrix gradMat, IntegerVector dims, IntegerVector sinks);
RcppExport SEXP _moPLOT_integrateVectorField(SEXP gradMatSEXP, SEXP dimsSEXP, SEXP sinksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type gradMat(gradMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sinks(sinksSEXP);
    rcpp_result_gen = Rcpp::wrap(integrateVectorField(gradMat, dims, sinks));
    return rcpp_result_gen;
END_RCPP
}
// integrateBackwards
IntegerVector integrateBackwards(NumericMatrix gradMat, IntegerVector dims, int startID, IntegerVector stopCells);
RcppExport SEXP _moPLOT_integrateBackwards(SEXP gradMatSEXP, SEXP dimsSEXP, SEXP startIDSEXP, SEXP stopCellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type gradMat(gradMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< int >::type startID(startIDSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type stopCells(stopCellsSEXP);
    rcpp_result_gen = Rcpp::wrap(integrateBackwards(gradMat, dims, startID, stopCells));
    return rcpp_result_gen;
END_RCPP
}
// locallyNondominatedCPP
IntegerVector locallyNondominatedCPP(NumericMatrix fnMat, IntegerVector dims, bool includeDiagonals);
RcppExport SEXP _moPLOT_locallyNondominatedCPP(SEXP fnMatSEXP, SEXP dimsSEXP, SEXP includeDiagonalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type fnMat(fnMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< bool >::type includeDiagonals(includeDiagonalsSEXP);
    rcpp_result_gen = Rcpp::wrap(locallyNondominatedCPP(fnMat, dims, includeDiagonals));
    return rcpp_result_gen;
END_RCPP
}
// changeOfSignCPP
IntegerVector changeOfSignCPP(NumericVector fnVec, IntegerVector dims, bool includeDiagonals);
RcppExport SEXP _moPLOT_changeOfSignCPP(SEXP fnVecSEXP, SEXP dimsSEXP, SEXP includeDiagonalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fnVec(fnVecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< bool >::type includeDiagonals(includeDiagonalsSEXP);
    rcpp_result_gen = Rcpp::wrap(changeOfSignCPP(fnVec, dims, includeDiagonals));
    return rcpp_result_gen;
END_RCPP
}
// changeOfBasin
IntegerVector changeOfBasin(IntegerVector basins, IntegerVector dims);
RcppExport SEXP _moPLOT_changeOfBasin(SEXP basinsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type basins(basinsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(changeOfBasin(basins, dims));
    return rcpp_result_gen;
END_RCPP
}
// gridBasedGradientCPP
NumericMatrix gridBasedGradientCPP(NumericVector fnVec, IntegerVector dims, NumericVector stepSizes, double precNorm, double precAngle);
RcppExport SEXP _moPLOT_gridBasedGradientCPP(SEXP fnVecSEXP, SEXP dimsSEXP, SEXP stepSizesSEXP, SEXP precNormSEXP, SEXP precAngleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fnVec(fnVecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stepSizes(stepSizesSEXP);
    Rcpp::traits::input_parameter< double >::type precNorm(precNormSEXP);
    Rcpp::traits::input_parameter< double >::type precAngle(precAngleSEXP);
    rcpp_result_gen = Rcpp::wrap(gridBasedGradientCPP(fnVec, dims, stepSizes, precNorm, precAngle));
    return rcpp_result_gen;
END_RCPP
}
// hessian
NumericMatrix hessian(NumericVector fnVec, IntegerVector dims, NumericVector stepSizes);
RcppExport SEXP _moPLOT_hessian(SEXP fnVecSEXP, SEXP dimsSEXP, SEXP stepSizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fnVec(fnVecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stepSizes(stepSizesSEXP);
    rcpp_result_gen = Rcpp::wrap(hessian(fnVec, dims, stepSizes));
    return rcpp_result_gen;
END_RCPP
}
// cumulateGradientsCPP
List cumulateGradientsCPP(NumericMatrix centers, NumericMatrix gradients, IntegerVector stopCells, double precVectorLength, double precNorm, bool fixDiagonals, bool cumulateGradientLength);
RcppExport SEXP _moPLOT_cumulateGradientsCPP(SEXP centersSEXP, SEXP gradientsSEXP, SEXP stopCellsSEXP, SEXP precVectorLengthSEXP, SEXP precNormSEXP, SEXP fixDiagonalsSEXP, SEXP cumulateGradientLengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type centers(centersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gradients(gradientsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type stopCells(stopCellsSEXP);
    Rcpp::traits::input_parameter< double >::type precVectorLength(precVectorLengthSEXP);
    Rcpp::traits::input_parameter< double >::type precNorm(precNormSEXP);
    Rcpp::traits::input_parameter< bool >::type fixDiagonals(fixDiagonalsSEXP);
    Rcpp::traits::input_parameter< bool >::type cumulateGradientLength(cumulateGradientLengthSEXP);
    rcpp_result_gen = Rcpp::wrap(cumulateGradientsCPP(centers, gradients, stopCells, precVectorLength, precNorm, fixDiagonals, cumulateGradientLength));
    return rcpp_result_gen;
END_RCPP
}
// getBiObjGradientCPP
NumericVector getBiObjGradientCPP(NumericVector g1, NumericVector g2, double precNorm, double precAngle);
RcppExport SEXP _moPLOT_getBiObjGradientCPP(SEXP g1SEXP, SEXP g2SEXP, SEXP precNormSEXP, SEXP precAngleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< double >::type precNorm(precNormSEXP);
    Rcpp::traits::input_parameter< double >::type precAngle(precAngleSEXP);
    rcpp_result_gen = Rcpp::wrap(getBiObjGradientCPP(g1, g2, precNorm, precAngle));
    return rcpp_result_gen;
END_RCPP
}
// getTriObjGradientCPP
NumericVector getTriObjGradientCPP(NumericVector g1, NumericVector g2, NumericVector g3, double precNorm, double precAngle);
RcppExport SEXP _moPLOT_getTriObjGradientCPP(SEXP g1SEXP, SEXP g2SEXP, SEXP g3SEXP, SEXP precNormSEXP, SEXP precAngleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g3(g3SEXP);
    Rcpp::traits::input_parameter< double >::type precNorm(precNormSEXP);
    Rcpp::traits::input_parameter< double >::type precAngle(precAngleSEXP);
    rcpp_result_gen = Rcpp::wrap(getTriObjGradientCPP(g1, g2, g3, precNorm, precAngle));
    return rcpp_result_gen;
END_RCPP
}
// getBiObjGradientGridCPP
NumericMatrix getBiObjGradientGridCPP(NumericMatrix gradMat1, NumericMatrix gradMat2, double precNorm, double precAngle);
RcppExport SEXP _moPLOT_getBiObjGradientGridCPP(SEXP gradMat1SEXP, SEXP gradMat2SEXP, SEXP precNormSEXP, SEXP precAngleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type gradMat1(gradMat1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gradMat2(gradMat2SEXP);
    Rcpp::traits::input_parameter< double >::type precNorm(precNormSEXP);
    Rcpp::traits::input_parameter< double >::type precAngle(precAngleSEXP);
    rcpp_result_gen = Rcpp::wrap(getBiObjGradientGridCPP(gradMat1, gradMat2, precNorm, precAngle));
    return rcpp_result_gen;
END_RCPP
}
// getTriObjGradientGridCPP
NumericMatrix getTriObjGradientGridCPP(NumericMatrix gradMat1, NumericMatrix gradMat2, NumericMatrix gradMat3, double precNorm, double precAngle);
RcppExport SEXP _moPLOT_getTriObjGradientGridCPP(SEXP gradMat1SEXP, SEXP gradMat2SEXP, SEXP gradMat3SEXP, SEXP precNormSEXP, SEXP precAngleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type gradMat1(gradMat1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gradMat2(gradMat2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gradMat3(gradMat3SEXP);
    Rcpp::traits::input_parameter< double >::type precNorm(precNormSEXP);
    Rcpp::traits::input_parameter< double >::type precAngle(precAngleSEXP);
    rcpp_result_gen = Rcpp::wrap(getTriObjGradientGridCPP(gradMat1, gradMat2, gradMat3, precNorm, precAngle));
    return rcpp_result_gen;
END_RCPP
}
// calculateMaxDisplayHeightCPP
NumericVector calculateMaxDisplayHeightCPP(NumericVector heights, IntegerVector dims, bool includeDiagonals);
RcppExport SEXP _moPLOT_calculateMaxDisplayHeightCPP(SEXP heightsSEXP, SEXP dimsSEXP, SEXP includeDiagonalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type heights(heightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< bool >::type includeDiagonals(includeDiagonalsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateMaxDisplayHeightCPP(heights, dims, includeDiagonals));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_moPLOT_assureBoundsCPP", (DL_FUNC) &_moPLOT_assureBoundsCPP, 4},
    {"_moPLOT_compute3DcrossProductCPP", (DL_FUNC) &_moPLOT_compute3DcrossProductCPP, 2},
    {"_moPLOT_computeVectorLengthCPP", (DL_FUNC) &_moPLOT_computeVectorLengthCPP, 1},
    {"_moPLOT_normalizeVectorCPP", (DL_FUNC) &_moPLOT_normalizeVectorCPP, 2},
    {"_moPLOT_normalizeMatrixRowsCPP", (DL_FUNC) &_moPLOT_normalizeMatrixRowsCPP, 2},
    {"_moPLOT_computeAngleCPP", (DL_FUNC) &_moPLOT_computeAngleCPP, 3},
    {"_moPLOT_findNextCellCPP", (DL_FUNC) &_moPLOT_findNextCellCPP, 1},
    {"_moPLOT_convertIndices2CellIDCPP", (DL_FUNC) &_moPLOT_convertIndices2CellIDCPP, 2},
    {"_moPLOT_convertCellID2IndicesCPP", (DL_FUNC) &_moPLOT_convertCellID2IndicesCPP, 2},
    {"_moPLOT_rotate90Right2D", (DL_FUNC) &_moPLOT_rotate90Right2D, 1},
    {"_moPLOT_rotate90Left2D", (DL_FUNC) &_moPLOT_rotate90Left2D, 1},
    {"_moPLOT_getMODescentRange2D", (DL_FUNC) &_moPLOT_getMODescentRange2D, 2},
    {"_moPLOT_getNeighbourhood", (DL_FUNC) &_moPLOT_getNeighbourhood, 2},
    {"_moPLOT_dominates", (DL_FUNC) &_moPLOT_dominates, 2},
    {"_moPLOT_imputeBoundary", (DL_FUNC) &_moPLOT_imputeBoundary, 3},
    {"_moPLOT_getCriticalPointsCellCPP", (DL_FUNC) &_moPLOT_getCriticalPointsCellCPP, 6},
    {"_moPLOT_connectedComponentsGrid", (DL_FUNC) &_moPLOT_connectedComponentsGrid, 2},
    {"_moPLOT_integrateVectorField", (DL_FUNC) &_moPLOT_integrateVectorField, 3},
    {"_moPLOT_integrateBackwards", (DL_FUNC) &_moPLOT_integrateBackwards, 4},
    {"_moPLOT_locallyNondominatedCPP", (DL_FUNC) &_moPLOT_locallyNondominatedCPP, 3},
    {"_moPLOT_changeOfSignCPP", (DL_FUNC) &_moPLOT_changeOfSignCPP, 3},
    {"_moPLOT_changeOfBasin", (DL_FUNC) &_moPLOT_changeOfBasin, 2},
    {"_moPLOT_gridBasedGradientCPP", (DL_FUNC) &_moPLOT_gridBasedGradientCPP, 5},
    {"_moPLOT_hessian", (DL_FUNC) &_moPLOT_hessian, 3},
    {"_moPLOT_cumulateGradientsCPP", (DL_FUNC) &_moPLOT_cumulateGradientsCPP, 7},
    {"_moPLOT_getBiObjGradientCPP", (DL_FUNC) &_moPLOT_getBiObjGradientCPP, 4},
    {"_moPLOT_getTriObjGradientCPP", (DL_FUNC) &_moPLOT_getTriObjGradientCPP, 5},
    {"_moPLOT_getBiObjGradientGridCPP", (DL_FUNC) &_moPLOT_getBiObjGradientGridCPP, 4},
    {"_moPLOT_getTriObjGradientGridCPP", (DL_FUNC) &_moPLOT_getTriObjGradientGridCPP, 5},
    {"_moPLOT_calculateMaxDisplayHeightCPP", (DL_FUNC) &_moPLOT_calculateMaxDisplayHeightCPP, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_moPLOT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
