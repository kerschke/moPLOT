% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addGGContour.R
\name{addGGContour}
\alias{addGGContour}
\title{Add Contour Lines to Gradient Field Heatmap.}
\usage{
addGGContour(
  g,
  lower,
  upper,
  fn1,
  fn2,
  fn3,
  log.scale = TRUE,
  col1 = "goldenrod1",
  col2 = "white",
  col3 = "cyan3",
  n.points = 30L,
  ...
)
}
\arguments{
\item{g}{\link{\code{ggplot}}\cr
\code{ggplot}-object as created by \code{\link{ggplotHeatmap}}.}

\item{lower}{\link{\code{\link{numeric}(d)}}\cr
Vector of lower bounds.}

\item{upper}{\link{\code{\link{numeric}(d)}}\cr
Vector of upper bounds.}

\item{fn1}{\link{\code{\link{function}}}\cr
The first objective used for computing the multi-objective gradient.}

\item{fn2}{\link{\code{\link{function}}}\cr
The second objective used for computing the multi-objective gradient.}

\item{fn3}{\link{\code{\link{function}}}\cr
The third objective (if existing) used for computing the multi-objective gradient.}

\item{log.scale}{\link{\code{\link{logical}(1L)}}\cr
Should the resulting heights be displayed on a log-scale? The default is \code{TRUE}.}

\item{col1}{\link{\code{\link{character}(1L)}}\cr
Color used for the contour lines of the first objective (default: \code{"goldenrod1"}).}

\item{col2}{\link{\code{\link{character}(1L)}}\cr
Color used for the contour lines of the second objective (default: \code{"white"}).}

\item{col3}{\link{\code{\link{character}(1L)}}\cr
Color used for the contour lines of the third objective (default: \code{"cyan3"}).}

\item{n.points}{\link{\code{\link{integer}(1L)}}\cr
Number of points used for computing the contour lines. The default is \code{30L}.}

\item{...}{\link{any}\cr
Further arguments to be passed to the \code{geom_tile} function of \code{ggplot}.}
}
\value{
\link{\code{ggplot}}\cr
A \code{ggplot} object displaying the multi-objective gradient landscape.
}
\description{
Add contour lines of the separate objectives to the heatmap of the
cumulated path lengths.
}
\examples{
# Define two single-objective test problems and a grid of points:
fn1 = function(x) sum((x - c(0.2, 1))^2)
fn2 = function(x) sum((x - c(0.5, 0.5))^2)
points = as.matrix(expand.grid(x1 = seq(0, 0.7, 0.005), x2 = seq(0, 1.25, 0.005)))

# Compute the corresponding gradients and the cumulated path lengths:
gradients = computeGradientField(points, fn1, fn2)
x = computeCumulatedPathLengths(points, gradients)

# Visualize the resulting multi-objective "landscape":
g = ggplotHeatmap(x)
g

# Add dashed contour lines to the plot:
addGGContour(g = g, lower = c(0, 0), upper = c(0.7, 1.25),
  fn1 = fn1, fn2 = fn2, linetype = "dashed")
}
